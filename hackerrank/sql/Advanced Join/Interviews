'''
coalesce 함수 설명

COALESCE(value1, value2, value3, ..., default_value)
왼쪽에서 오른쪽으로 값을 검사하며, NULL이 아닌 첫 번째 값을 반환.
모든 값이 NULL이면 NULL을 반환.


✅ 질문 요점
COALESCE(SUM(ss.total_submissions), 0)에서 SUM() 결과에 NULL이 없는데 왜 굳이 COALESCE를 쓰는 거야?

정답은 👉 "LEFT JOIN과 GROUP BY를 함께 쓸 때, SUM() 결과 자체가 NULL이 될 수 있기 때문"이야!

sum 은 진행 시 null 값은 무시하고 더해준다.
즉, SUM()은 내부에 값이 하나도 없거나 모두 NULL이면 결과가 NULL이야.
하지만 total_submissions 컬럼에 NULL이 없다면, SUM은 보통 NULL을 반환하지 않아.

left join 때문에 이렇게 쓰는 건데
left join 시 Submission_Stats에 매칭되는 데이터가 없는 contest_id가 있다면?

LEFT JOIN 때문에 ss.total_submissions은 NULL이 아니라 아예 데이터 자체가 없음
그래서 SUM()의 입력이 **"아예 없다"**면 SUM() 결과는 NULL
🎯 이 경우 COALESCE(SUM(...), 0)이 없으면 NULL이 그대로 출력됨
하지만 우리는 **"해당 contest에 제출이 0건이다"**라고 표현하고 싶으니까
👉 NULL 대신 0을 넣기 위해 COALESCE(..., 0)을 쓰는 거야

조인 테이블을 서브테이블로 해서 넣을 수도 있다.

on 칼럼명 다를 때
using 칼럼명 같을 때 사용
'''


SELECT
    c.contest_id,
    c.hacker_id,
    c.name,
    COALESCE(SUM(ss.total_submissions), 0) AS total_submissions,
    COALESCE(SUM(ss.total_accepted_submissions), 0) AS total_accepted_submissions,
    COALESCE(SUM(vs.total_views), 0) AS total_views,
    COALESCE(SUM(vs.total_unique_views), 0) AS total_unique_views
FROM
    Contests c
    JOIN Colleges co ON c.contest_id = co.contest_id
    JOIN Challenges ch ON co.college_id = ch.college_id
    LEFT JOIN (
        SELECT
            challenge_id,
            SUM(total_views) AS total_views,
            SUM(total_unique_views) AS total_unique_views
        FROM
            View_Stats
        GROUP BY
            challenge_id
    ) vs ON ch.challenge_id = vs.challenge_id
    LEFT JOIN (
        SELECT
            challenge_id,
            SUM(total_submissions) AS total_submissions,
            SUM(total_accepted_submissions) AS total_accepted_submissions
        FROM
            Submission_Stats
        GROUP BY
            challenge_id
    ) ss ON ch.challenge_id = ss.challenge_id
GROUP BY
    c.contest_id,
    c.hacker_id,
    c.name
HAVING
    total_submissions > 0
    OR total_accepted_submissions > 0
    OR total_views > 0
    OR total_unique_views > 0
ORDER BY
    c.contest_id;
